package Array;

public class FindMinimuminRotatedSortedArray {

	// https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/
	public static void main(String[] args) {
		// { 6, 7, 1, 2, 3, 4, 5 }{ 4, 5, 1, 2, 3 }
		int[] nums = { 1, 2, 3, 4, 5 };
		// System.out.println(findMin(nums));
		// System.out.println(findMin(nums, 0, nums.length - 1));
		System.out.println(findMin2(nums, 0, nums.length - 1));

	}

	public static int findMin2(int arr[], int low, int high) {
		while (low < high) {
			int mid = (low + high) / 2;
			if (arr[mid] > arr[high] && arr[mid] > arr[high])
				low = mid + 1;
			else if (arr[mid] >= arr[low] && arr[mid] < arr[high])
				return arr[low];
			else if (arr[mid] < arr[low] && arr[mid] < arr[high])
				high = mid;
		}
		return arr[low];
	}

	public static int findMin(int[] nums) {
		for (int i = 0; i < nums.length - 1; i++)
			if (nums[i] > nums[i + 1])
				return nums[++i];
		return nums[0];		
	}

   //  5 1 2 3 4 	
	public static int findMin(int arr[], int low, int high) {
		while (low < high) {
			int mid = (low + high) / 2;
			// if duplicates elements then only this condition need
			// if (arr[mid] == arr[high])
			// high--;
			if (arr[mid] > arr[high])
				low = mid + 1;
			else
				high = mid;
		}
		return arr[low];
	}

}
